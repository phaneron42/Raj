#include <stdio.h>

#include <stdbool.h>



#define MAX 100





void printFrames(int frames[], int frameSize) {

    for (int i = 0; i < frameSize; i++) {

        if (frames[i] == -1)

            printf("- ");

        else

            printf("%d ", frames[i]);

    }

    printf("\n");

}





void FCFS(int pages[], int numPages, int frameSize) {

    int frames[frameSize], pageFaults = 0, index = 0;

    

    for (int i = 0; i < frameSize; i++) {

        frames[i] = -1; 

    }



    printf("\nFCFS Page Replacement:\n");

    for (int i = 0; i < numPages; i++) {

        bool found = false;



        

        for (int j = 0; j < frameSize; j++) {

            if (frames[j] == pages[i]) {

                found = true;  

                printf("%d: ", pages[i]);

                break;

            }

        }



       

        if (!found) {

            frames[index] = pages[i];  

            index = (index + 1) % frameSize;  

            pageFaults++;

            printf("Page fault: %d, Frames: ", pages[i]);

        }



        printFrames(frames, frameSize);  

    }



    printf("\nTotal Page Faults (FCFS): %d\n", pageFaults);

}



int findLRU(int time[], int frameSize) {

    int min = time[0], index = 0;

    for (int i = 1; i < frameSize; i++) {

        if (time[i] < min) {

            min = time[i];

            index = i;

        }

    }

    return index;

}



void LRU(int pages[], int numPages, int frameSize) {

    int frames[frameSize], time[frameSize], pageFaults = 0, clock = 0;

    

    for (int i = 0; i < frameSize; i++) {

        frames[i] = -1;

        time[i] = 0;

    }



    printf("\nLRU Page Replacement:\n");

    for (int i = 0; i < numPages; i++) {

        bool found = false;



        for (int j = 0; j < frameSize; j++) {

            if (frames[j] == pages[i]) {

                found = true; 

                time[j] = ++clock;

                printf("%d: ", pages[i]);

                break;

            }

        }



        if (!found) {

            int lruIndex = findLRU(time, frameSize); 

            frames[lruIndex] = pages[i];  

            time[lruIndex] = ++clock;  

            pageFaults++;

            printf("Page fault: %d, Frames: ", pages[i]);

        }



        printFrames(frames, frameSize);  

    }



    printf("\nTotal Page Faults (LRU): %d\n", pageFaults);

}



void Optimal(int pages[], int numPages, int frameSize) {

    int frames[frameSize], pageFaults = 0;



    for (int i = 0; i < frameSize; i++) {

        frames[i] = -1;  

    }



    printf("\nOptimal Page Replacement:\n");

    for (int i = 0; i < numPages; i++) {

        bool found = false;



        for (int j = 0; j < frameSize; j++) {

            if (frames[j] == pages[i]) {

                found = true;

                printf("%d: ", pages[i]);

                break;

            }

        }



        if (!found) {

            if (i < frameSize) {

                frames[i] = pages[i];  

            } else {

                int farthest = i + 1, replaceIndex = -1;



                

                for (int j = 0; j < frameSize; j++) {

                    int k;

                    for (k = i + 1; k < numPages; k++) {

                        if (frames[j] == pages[k]) {

                            if (k > farthest) {

                                farthest = k;

                                replaceIndex = j;

                            }

                            break;

                        }

                    }

                    if (k == numPages) {

                        replaceIndex = j;

                        break;

                    }

                }

                if (replaceIndex == -1) {

                    replaceIndex = 0;  

                }

                frames[replaceIndex] = pages[i]; 

            }

            pageFaults++;

            printf("Page fault: %d, Frames: ", pages[i]);

        }



        printFrames(frames, frameSize);  

    }



    printf("\nTotal Page Faults (Optimal): %d\n", pageFaults);

}



int main() {

    int numPages, frameSize, pages[MAX];



    printf("Enter the number of pages: ");

    scanf("%d", &numPages);



    printf("Enter the page reference string: ");

    for (int i = 0; i < numPages; i++) {

        scanf("%d", &pages[i]);

    }



    printf("Enter frame size (minimum 3): ");

    scanf("%d", &frameSize);



    if (frameSize < 3) {

        printf("Frame size must be at least 3!\n");

        return -1;

    }



    FCFS(pages, numPages, frameSize);

    LRU(pages, numPages, frameSize);

    Optimal(pages, numPages, frameSize);



    return 0;

}

